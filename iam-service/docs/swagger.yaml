basePath: /
definitions:
  auth.AuthResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/user.User'
    type: object
  auth.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  auth.GoogleLoginRequest:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  auth.GoogleLoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/user.User'
    type: object
  auth.LoginRequest:
    properties:
      password:
        example: securepassword123
        type: string
      username:
        example: john_doe
        type: string
    required:
    - password
    - username
    type: object
  auth.RegisterRequest:
    properties:
      country:
        example: US
        type: string
      display_name:
        example: John Doe
        type: string
      email:
        example: john.doe@example.com
        type: string
      mobile:
        example: "+1234567890"
        type: string
      password:
        example: securepassword123
        type: string
      role:
        example: user
        type: string
      username:
        example: john_doe
        type: string
    required:
    - country
    - display_name
    - email
    - mobile
    - password
    - username
    type: object
  auth.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  role.CreateRoleRequest:
    properties:
      description:
        type: string
      role:
        type: string
    required:
    - description
    - role
    type: object
  role.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  role.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  role.UpdateRoleRequest:
    properties:
      description:
        type: string
      role:
        type: string
    type: object
  user.User:
    properties:
      avatar_url:
        type: string
      country:
        type: string
      created_at:
        type: string
      display_name:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      updated_at:
        type: string
    type: object
host: localhost:8091
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Identity and Access Management Service
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: IAM Service API
  version: "1.0"
paths:
  /auth/google:
    post:
      consumes:
      - application/json
      description: Authenticate user with Google OAuth
      parameters:
      - description: Google OAuth code
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.GoogleLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.GoogleLoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Google OAuth Login
      tags:
      - authentication
  /auth/google/url:
    get:
      description: Get Google OAuth authorization URL
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get Google OAuth URL
      tags:
      - authentication
  /login:
    post:
      consumes:
      - application/json
      description: Login user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: Authenticate user
      tags:
      - auth
  /me:
    get:
      consumes:
      - application/json
      description: Get information about the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user info
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/auth.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /roles:
    get:
      consumes:
      - application/json
      description: Get a list of all available roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/role.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/role.ErrorResponse'
      summary: Get all roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create a new role with role name and description
      parameters:
      - description: Role data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/role.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/role.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/role.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/role.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/role.ErrorResponse'
      summary: Create a new role
      tags:
      - roles
  /roles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a role by its ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/role.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/role.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/role.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/role.ErrorResponse'
      summary: Delete role
      tags:
      - roles
    get:
      consumes:
      - application/json
      description: Get a specific role by its ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/role.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/role.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/role.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/role.ErrorResponse'
      summary: Get role by ID
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Update an existing role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Role update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/role.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/role.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/role.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/role.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/role.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/role.ErrorResponse'
      summary: Update role
      tags:
      - roles
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
